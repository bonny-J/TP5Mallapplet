<?php


namespace app\lib\exception;
use Exception;
use think\exception\Handle;
use think\Request;
use think\facade\Log;
/*
 * 全局异常处理类
 *用于返回给客户端人员
*/
class ExceptionHandler extends Handle
{
    private $code;
    private $msg;
    private $errorCode;

    public function render(Exception $e)
    {
//        return parent::render($e); // TODO: Change the autogenerated stub
          if($e instanceof BaseException) {
//              如果是自定义的异常
                $this->code = $e->code;
                $this->msg = $e->msg;
                $this->errorCode = $e->errorCode;
          }else{
//              如果是调试模式
                if(config('app_debug')){
                    return parent::render($e);
                }else{
                    $this->code = 500;
                    $this->msg = '服务器异常';
                    $this->errorCode = 999;
                    $this->recordErrorLog($e);
                }

          }
          $request = new Request();
          $result = [
                'msg' => $this->msg,
                'error_code' => $this->errorCode,
                'request_url' => $request->url()
          ];
          return json($result,$this->code);
    }
    /*自定义的日记加载*/
    private function recordErrorLog(Exception $e){
        Log::init([
            'type' => 'File',
            'path' => '../../runtime/log/',
            'lever' => ['error']
        ]);
        Log::record($e->getMessage(),'error');
    }
}